pull(ASV)
archaea_node
# but first find the ASVs that are Archaea
archaeal_ASVs <-
tax_table(unrooted_physeq) %>%
as.data.frame() %>%
filter(Kingdom == "Archaea") %>%
pull(ASV)
# find the node that encompasses all Archaea
archaeal_node <-
phytools::findMRCA(unrooted_tree,
tips = archaeal_ASVs, type = "node") # node = 3394
# Inspect
archaeal_node
# View clade to check it out
viewClade(kingdom_tree, archaea_node)
viewClade(kingdom_node_tree, archaea_node)
# View clade to check it out
viewClade(kingdom_tree, archaeal_node)
viewClade(kingdom_node_tree, archaeal_node)
# How many archaeal ASVs?
archaeal_node
# How many archaeal ASVs?
length(archaeal_ASVs)
head(archaeal_ASVs)
archaeal_ASVs
# What's the sum of the counts?
unrooted_physeq %>%
subset_taxa(., ASV %in% archaeal_ASVs$ASV) %>%
otu_table() %>%
data.frame() %>%
colSums()
# What's the sum of the counts?
unrooted_physeq %>%
subset_taxa(., ASV %in% archaeal_ASVs) %>%
otu_table() %>%
data.frame() %>%
colSums()
# View clade to check it out
viewClade(kingdom_tree, archaeal_node)
viewClade(kingdom_node_tree, archaeal_node)
# Let's highlight!
node_3394 <-
ggtree(unrooted_physeq) +
geom_tippoint(mapping = aes(color = Kingdom), size = 1.5) +
#geom_text(aes(label = node), hjust = -0.7, vjust = -0.2, size = 2) +
geom_highlight(node = archaea_node, fill = "goldenrod1") +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# Let's highlight!
node_3394 <-
ggtree(unrooted_physeq) +
geom_tippoint(mapping = aes(color = Kingdom), size = 1.5) +
#geom_text(aes(label = node), hjust = -0.7, vjust = -0.2, size = 2) +
geom_highlight(node = archaeal_node, fill = "goldenrod1") +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# Visualize it
node_3394
# Root it!
archaea_root_tree <-
ape::root(phy_tree(unrooted_physeq),
node = archaeal_node, resolve.root = TRUE)
# Check it!
is.rooted(archaea_root_tree)
# Root it!
archaeal_rooted_tree <-
ape::root(phy_tree(unrooted_physeq),
node = archaeal_node, resolve.root = TRUE)
rm(archaea_root_tree)
# Root it!
archaeal_rooted_tree <-
ape::root(phy_tree(unrooted_physeq),
node = archaeal_node, resolve.root = TRUE)
# Check it!
is.rooted(archaea_root_tree)
# Check it!
is.rooted(archaeal_rooted_tree)
# Is the tree rooted?
is.rooted(unrooted_physeq)
?is.rooted
# Is the tree rooted?
is.rooted(phy_tree(unrooted_physeq))
# Is the tree rooted?
tidytree::is.rooted(phy_tree(unrooted_physeq))
# Merge with physeq
archaeal_rooted_physeq <-
merge_phyloseq(raw_preprocessed_physeq, archaeal_rooted_tree)
# Finally let's plot it!
# Plot rooted simple tree with no text
archaea_rooted_simple <-
ggtree(archaeal_rooted_physeq) +
geom_tippoint(aes(color = Kingdom)) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
rm(archaea_rooted_simple)
# Finally let's plot it!
# Plot rooted simple tree with no text
archaeal_rooted_tree_simple <-
ggtree(archaeal_rooted_physeq) +
geom_tippoint(aes(color = Kingdom)) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# View it!
archaeal_rooted_tree_simple
# Plot rooted tree with text
archaea_rooted_text <-
ggtree(archaea_root_physeq) +
geom_tippoint(aes(color = Kingdom)) +
geom_text(aes(label = node), hjust = -0.5, vjust = -0.3, size = 1.5) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# View it!
archaea_rooted_text
# Plot rooted tree with text
archaea_rooted_node_tree <-
ggtree(archaea_root_physeq) +
geom_tippoint(aes(color = Kingdom)) +
geom_text(aes(label = node), hjust = -0.5, vjust = -0.3, size = 1.5) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
rm(archaeal_rooted_tree_simple)
# Finally let's plot it!
# Plot rooted simple tree with no text
archaeal_rooted_tree <-
ggtree(archaeal_rooted_physeq) +
geom_tippoint(aes(color = Kingdom)) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# View it!
archaeal_rooted_tree
# Plot rooted tree with text
archaea_rooted_node_tree <-
ggtree(archaea_root_physeq) +
geom_tippoint(aes(color = Kingdom)) +
geom_text(aes(label = node), hjust = -0.5, vjust = -0.3, size = 1.5) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# View it!
archaea_rooted_node_tree
# Plot rooted tree with text
archaea_rooted_node_tree <-
ggtree(archaeal_rooted_physeq) +
geom_tippoint(aes(color = Kingdom)) +
geom_text(aes(label = node), hjust = -0.5, vjust = -0.3, size = 1.5) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
rm(archaea_rooted_node_tree)
# Finally let's plot it!
# Plot rooted simple tree with no text
archaeal_rooted_tree <-
ggtree(archaeal_rooted_physeq) +
geom_tippoint(aes(color = Kingdom)) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# View it!
archaeal_rooted_tree
# Plot rooted tree with text
archaeal_rooted_node_tree <-
ggtree(archaeal_rooted_physeq) +
geom_tippoint(aes(color = Kingdom)) +
geom_text(aes(label = node), hjust = -0.5, vjust = -0.3, size = 1.5) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# View it!
archaeal_rooted_node_tree
# Check to see if tree is rooted.. expect it to be false
is.rooted(phy_tree(unrooted_physeq))
?midpoint.root
# Let's midpoint root the tree
midpoint_rooted_tree <-
phytools::midpoint.root(phy_tree(unrooted_physeq))
# Let's midpoint root the tree
midpoint_rooted_tree <-
unrooted_physeq %>%
phy_tree() %>%
phytools::midpoint.root()
midpoint_rooted_tree
# Is the new tree rooted? Should be TRUE!
is.rooted(midpoint_rooted_tree)
midpoint_rooted_tree
# Quick inspection of tree
ggtree(midpoint_rooted_physeq) +
geom_tippoint(mapping = aes(color = Kingdom)) +
geom_tippoint(aes(color = Kingdom)) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# Assign to a new phyloseq object!
# Merge tree with the raw_preprocessed physeq
midpoint_rooted_physeq <-
merge_phyloseq(raw_preprocessed_physeq, midpoint_rooted_tree)
# Quick inspection of tree
ggtree(midpoint_rooted_physeq) +
geom_tippoint(mapping = aes(color = Kingdom)) +
geom_tippoint(aes(color = Kingdom)) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# Look at the tree
midpoint_rooted_tree
# Quick inspection of tree
midpoint_rooted_tree <-
ggtree(midpoint_rooted_physeq) +
geom_tippoint(mapping = aes(color = Kingdom)) +
geom_tippoint(aes(color = Kingdom)) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# Quick inspection of tree
midpoint_rooted_tree_plot <-
ggtree(midpoint_rooted_physeq) +
geom_tippoint(mapping = aes(color = Kingdom)) +
geom_tippoint(aes(color = Kingdom)) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# Look at the tree
midpoint_rooted_tree_plot
# Plot rooted tree with text
archaeal_rooted_node_tree_plot <-
archaeal_rooted_tree_plot +
geom_text(aes(label = node), hjust = -0.5, vjust = -0.3, size = 1.5)
# Finally let's plot it!
# Plot rooted simple tree with no text
archaeal_rooted_tree_plot <-
ggtree(archaeal_rooted_physeq) +
geom_tippoint(aes(color = Kingdom)) +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey"))
# View it!
archaeal_rooted_tree_plot
# Plot rooted tree with text
archaeal_rooted_node_tree_plot <-
archaeal_rooted_tree_plot +
geom_text(aes(label = node), hjust = -0.5, vjust = -0.3, size = 1.5)
# View it!
archaeal_rooted_node_tree_plot
# Add nodes
midpoint_rooted_tree_node_plot <-
midpoint_rooted_tree_plot +
geom_text(aes(label = node), hjust = -0.5, vjust = -0.3, size = 1.5)
# View it
midpoint_rooted_tree_node_plot
archaea_root_physeq
View(archaeal_rooted_tree)
View(archaeal_rooted_physeq)
# Take a quick look at the two!
archaeal_rooted_physeq # Archaeal rooted tree
midpoint_rooted_physeq # Midpiont rooted tree
# Take a quick look at the two!
archaeal_rooted_physeq # Archaeal rooted tree
midpoint_rooted_physeq # Midpiont rooted tree
# Save both phyloseq objects to one .RData file
save(list = c("archaeal_rooted_physeq", "midpoint_rooted_physeq"),
file = "data/04_PhylogeneticTree/phytree_preprocessed_physeqs.RData")
# Now, save archaeal rooted phyloseq object
save(archaeal_rooted_physeq,
file = "data/04_Phylogenetic_Tree/archaeal_rooted_physeq.RData")
# Now, save midpoint rooted phyloseq object
save(midpoint_rooted_physeq,
file = "data/04_Phylogenetic_Tree/midpoint_rooted_physeq.RData")
# Now, save archaeal rooted phyloseq object
save(archaeal_rooted_physeq,
file = "data/04_PhylogeneticTree/archaeal_rooted_physeq.RData")
# Now, save midpoint rooted phyloseq object
save(midpoint_rooted_physeq,
file = "data/04_PhylogeneticTree/midpoint_rooted_physeq.RData")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
# Always relevant to the document directory
# send any figure output to this folder
fig.path = "../figures/04_PhylogeneticTree/",
warning = FALSE)
# Chunk 2: rmd-start
# What time did we start running this script?
start_time <- Sys.time()
# Chunk 3: set-seed
# Any number can be chosen
set.seed(238428)
# Chunk 4: load-packages
pacman::p_load(tidyverse, phyloseq, ggtree, phytools, tidytree, phylobase,
install = FALSE)
# Chunk 5: load-data
# Preprocessed phyloseq object
load("data/03_PreProcessing/raw_preprocessed_physeq.RData")
# Inspect the phyloseq object
raw_preprocessed_physeq
# Load in the tree!
unrooted_tree <- read.tree("data/04_PhylogeneticTree/ASVs_unrooted.tree")
# Take a look at the tree
unrooted_tree
str(unrooted_tree)
# Chunk 6: merge-physeq
# Intuition check
stopifnot(ntaxa(raw_preprocessed_physeq) == ntaxa(unrooted_tree))
# No news is good news!
# Merge the tree with the phyloseq object
unrooted_physeq <-
merge_phyloseq(raw_preprocessed_physeq, unrooted_tree)
# Let's take a look!
unrooted_physeq
# Chunk 7: plot-tree-unrooted
# Make a basic tree with the domains
kingdom_tree <-
ggtree(unrooted_physeq) +
# color tips by kingdom
geom_tippoint(mapping = aes(color = Kingdom)) +
# add a title
labs(title = "Unrooted Tree") +
scale_color_manual(values = c("firebrick3", "cornflowerblue", "grey")) +
# Move the legend to the bottom of the tree
theme(legend.position = "bottom")
# Look at it
kingdom_tree
# Check if tree is rooted
is.rooted(unrooted_tree) # should be TRUE
# Chunk 8: kingdom-node-tree
kingdom_node_tree <-
kingdom_tree +
# Add the node label
geom_text(aes(label=node), hjust= -0.5, vjust = -0.3, size = 2)
# Plot the tree
kingdom_node_tree
# Chunk 9: evaluate-long-branches-703
# View a specific clade
# Zoom in on node that looks potentially suspicious
viewClade(kingdom_node_tree +
labs(title = "Kingdom Tree: Node 703"),
node = 703)
# This plot is too zoomed in! Let's try to zoom out by looking at ancestors
# Lets see its ancestors, which will tell us each node as it steps up.
# It's ideal to look a couple nodes up but not too far!
tidytree::ancestor(unrooted_tree, 703) # The input is the TREE, not phyloseq!!
# Let's evaluate 3308!!
viewClade(kingdom_node_tree, 3308) # even more zoomed out
# Chunk 10: pull-node703
# Or if there are two nodes that we can see we can find its MRCA
## create tibble of tree to identify offspring
tree_tib <- as_tibble(unrooted_physeq@phy_tree)
# Inspect
head(tree_tib)
str(tree_tib)
# lets look at the long branch
mrca_node_703 <- tidytree::MRCA(unrooted_tree, .node1 = 703, .node2 = 702) #3315
# Inspect
mrca_node_703
## create dataframe to view ASVs and taxa info and to pull the ASVs
node_3315 <-
offspring(tree_tib, mrca_node_703, tiponly = TRUE) %>%
as.data.frame() %>%
pull(label)
# Inspect
node_3315
# Now, let's pull out the taxonomy information, including the ASV sequence!
node_3315_df <-
unrooted_physeq %>%
tax_table() %>%
as.data.frame() %>%
filter(ASV %in% node_3315)
# Take a look:
glimpse(node_3315_df)
# look at counts of the ASVs
unrooted_physeq %>%
subset_taxa(., ASV %in% node_3315_df$ASV) %>%
otu_table() %>%
data.frame() %>%
colSums()
# Lets BLAST our sequences to investigate if they are real or not
node_3315_df
# Chunk 11: evaluate-long-branches-1910
# View a specific clade
# Zoom in on node that looks potentially suspicious
viewClade(kingdom_node_tree +
labs(title = "Kingdom Tree: Node 1910"),
node = 1910)
# This plot is too zoomed in! Let's try to zoom out by looking at ancestors
# Lets see its ancestors, which will tell us each node as it steps up.
# It's ideal to look a couple nodes up but not too far!
tidytree::ancestor(unrooted_tree, 1910) # The input is the TREE, not phyloseq!!
# Let's evaluate 4519!!
viewClade(kingdom_node_tree, 4519) # even more zoomed out
# Chunk 12: pull-node1910
# lets look at the long branch
mrca_node_1910 <- tidytree::MRCA(unrooted_tree, .node1 = 1910, .node2 = 1909) #3315
# Inspect
mrca_node_1910 #4529
## create dataframe to view ASVs and taxa info and to pull the ASVs
node_4529 <-
offspring(tree_tib, mrca_node_1910, tiponly = TRUE) %>%
as.data.frame() %>%
pull(label)
# Inspect
node_4529
# Now, let's pull out the taxonomy information, including the ASV sequence!
node_4529_df <-
unrooted_physeq %>%
tax_table() %>%
as.data.frame() %>%
filter(ASV %in% node_4529)
# Take a look:
glimpse(node_4529_df)
# look at counts of the ASVs
unrooted_physeq %>%
subset_taxa(., ASV %in% node_4529_df$ASV) %>%
otu_table() %>%
data.frame() %>%
colSums()
# Lets BLAST our sequences to investigate if they are real or not
node_4529_df
# Is the tree rooted?
tidytree::is.rooted(phy_tree(unrooted_physeq))
# but first find the ASVs that are Archaea
archaeal_ASVs <-
tax_table(unrooted_physeq) %>%
as.data.frame() %>%
filter(Kingdom == "Archaea") %>%
pull(ASV)
# How many archaeal ASVs?
length(archaeal_ASVs)
archaeal_ASVs
unrooted_tree
# find the node that encompasses all Archaea
archaeal_node <-
phytools::findMRCA(unrooted_tree,
tips = archaeal_ASVs, type = "node")
# Load in the tree!
unrooted_tree <- read.tree("data/04_PhylogeneticTree/ASVs_unrooted.tree")
?findMRCA
unrooted_tree
archaeal_ASVs
archaeal_node.
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
# write figures to the figures folder
fig.path = "../figures/03_PreProcessing/")
# Chunk 2: load-packages
#install.packages("BiocManager")
#BiocManager::install("Biostrings")
# NOTE, you will need to install the following 2 packages to
# re-create the negative control plots below!
#install.packages("ggpubr")
#install.packages("rstatix")
# Load packages with pacman
# Be sure that you load dada2 & Patchwork, which we didn't do in class on March 12th
pacman::p_load(devtools, phyloseq, dada2, patchwork, Biostrings, tidyverse,
# Note to add ggpubr & rstatix!!
ggpubr, rstatix, install = FALSE)
# Chunk 3: rmd-start
# What time did we start running this script?
start_time <- Sys.time()
# Chunk 4: load-metadata
# load in metadata
metadata_df <-
read_csv("data/metadata.csv") %>%
# Fix Column Name
dplyr::rename("sample_names" = "...1") %>%
# Add sample names also as a column
mutate(names = sample_names)
# Inspect
head(metadata_df)
dim(metadata_df)
# include dada2 output
load("data/01_DADA2/track_read_counts.RData")
# Take a look
glimpse(track_counts_df)
dim(track_counts_df)
# Check filenames
head(track_counts_df$sample_names)
# Fix sample names in track_reads
track_counts_df$sample_names <- sapply(strsplit(track_counts_df$sample_names, "_"), `[`, 1)
# Intuition check
head(track_counts_df$sample_names)
# What's different?
setdiff(track_counts_df$sample_names, metadata_df$sample_names)
# Let's do a filtering join with left_join
metadata_final_df <-
metadata_df %>%
left_join(., track_counts_df, by = "sample_names") %>%
# sample names to the rownames to merge into phyloseq
column_to_rownames(var = "sample_names")
# Check
dim(metadata_final_df)
# Chunk 5: load-asv-table
asv_df <-
read.delim(file = "data/01_DADA2/ASV_table.tsv", sep = "\t",
# add the column names and row names
header = TRUE, row.names = 1) %>%
dplyr::select(-"CJ.V08.P")
# Inspect
asv_df[1:3, 1:3]
# fix Column names
## Remove the X: denote at the beginning "^"
colnames(asv_df) <- sub(pattern = "^X", replacement = "" , colnames(asv_df))
## Replace the . with a -: "\\." since . is a special character in regex
colnames(asv_df) <- gsub(pattern = "\\.", replacement = "-", colnames(asv_df))
# Final inspection
head(colnames(asv_df))
asv_df[1:3, 1:3]
# Chunk 6: load-tax-table
tax_df <-
read.delim("data/01_DADA2/ASV_taxonomy.tsv", sep = "\t",
header = TRUE, row.names = 1)
# Inspect
dim(tax_df)
dim(asv_df)
# Add check
stopifnot(rownames(asv_df) == rownames(tax_df))
# Chunk 7: phyloseq-handoff
raw_physeq <-
phyloseq(otu_table(asv_df, taxa_are_rows = TRUE),
sample_data(metadata_final_df),
tax_table(as.matrix(tax_df)))
# Check out
raw_physeq
# save
save(raw_physeq, file = "data/03_PreProcessing/raw_physeq.RData")
noChloros_physeq <-
raw_physeq %>%
subset_taxa(Order != "Chloroplast" | is.na(Order))
# How many ASVs were chloroplasts?
numChloros_ASVs <- ntaxa(raw_physeq) - ntaxa(noChloros_physeq)
numChloros_ASVs
```{r rm-mitos}
noChlorosMitos_physeq <-
noChloros_physeq %>%
subset_taxa(Family != "Mitochondria" | is.na(Family))
# How many ASVs were mitochondria?
numMitos_ASVs <- ntaxa(noChloros_physeq) - ntaxa(noChlorosMitos_physeq)
numMitos_ASVs
