source("code/functions.R")
# Chunk 5: load-data
# load phyloseq object
load("data/04_PhylogeneticTree/phytree_preprocessed_physeqs.RData")
archaeal_rooted_physeq
# Intuition check on seq depth
min(sample_sums(archaeal_rooted_physeq))
# Create Metadata_df
metadata_df <-
archaeal_rooted_physeq %>%
sample_data() %>%
data.frame()
# Chunk 6: rm-outlier
archaeal_rooted_physeq <-
archaeal_rooted_physeq %>%
subset_samples(names != "20210615-MA-ABB2F") %>%
# And remove any ASVs unique to this sample, just in case.
prune_taxa(taxa_sums(.) > 0, .)
# Check that we now have 88 samples
archaeal_rooted_physeq
# Chunk 7: explore-read-counts
# calculate read counts per sample
raw_TotalSeqs_df <-
archaeal_rooted_physeq %>%
# Calculate the total number of sequences/reads
sample_sums() %>%
data.frame()
# Take a look
head(raw_TotalSeqs_df)
# Rename the column
colnames(raw_TotalSeqs_df)[1] <- "TotalSeqs"
# add a new column of num_ASVs (RAW, non-noramlized # ASVs)
raw_TotalSeqsASVs_df <-
raw_TotalSeqs_df %>%
mutate(num_ASVs = colSums(otu_table(archaeal_rooted_physeq) > 1))
#View(raw_TotalSeqsASVs_df)
# Plot histogram of seq depth
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
scale_x_continuous(limits = c(0, 7500)) +
labs(title = "Raw Seq Depth ") +
theme_bw()
# Plot Seq Depth versus num_ASVs
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(0, 7500)) +
geom_smooth(method = "lm") +
labs(title = "Seq Depth vs # ASVs")
# is it significant?
summary(lm(TotalSeqs ~ num_ASVs, data = raw_TotalSeqsASVs_df))
# Chunk 8: scale-reads
min(sample_sums(archaeal_rooted_physeq))
# Scale the reads
scaled_physeq <-
archaeal_rooted_physeq %>%
scale_reads(round = "matround")
# Look at it
scaled_physeq
# Look at it more!
#View(data.frame(otu_table(archaeal_rooted_physeq)))
#View(data.frame(otu_table(scaled_physeq)))
# Confirm seq read depth of scaled_physeq
scaled_TotalSeqs_df <-
scaled_physeq %>%
sample_sums() %>%
data.frame()
colnames(scaled_TotalSeqs_df)[1] <- "TotalSeqs"
# add a new column of num_ASVs (RAW, non-noramlized # ASVs)
scaled_TotalSeqsASVs_df <-
scaled_TotalSeqs_df %>%
mutate(num_ASVs = colSums(otu_table(scaled_physeq) > 1))
# Plot it!
scaled_TotalSeqs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
scale_x_continuous(limits = c(0, 7500)) +
theme_bw()
# Scaling always gives us a range!
# MInimum sequences
min(scaled_TotalSeqs_df$TotalSeqs)
# Total Range
range(scaled_TotalSeqs_df)
# How many is that range?
range_seqs <- (max(scaled_TotalSeqs_df$TotalSeqs) - min(scaled_TotalSeqs_df$TotalSeqs))
range_seqs
# And in terms of percent?
range_seqs/max(scaled_TotalSeqs_df$TotalSeqs)
#View(scaled_TotalSeqs_df)
# Set the axis min and max for the next plot
max_y <- max(scaled_TotalSeqs_df$TotalSeqs) + 10
min_y <- min(scaled_TotalSeqs_df$TotalSeqs) - 10
# Now, draw the plot
scaled_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(min_y, max_y)) +
#geom_smooth(method = "lm") +
labs(title = "Scaled: Seq Depth vs # ASVs")
# Chunk 9: calc-dissimilarity
# Sorensen Dissimiliarty
scaled_sorensen_dist <- phyloseq::distance(scaled_physeq, method = "bray", binary = TRUE)
# What does it look like?
class(scaled_sorensen_dist)
str(scaled_sorensen_dist)
head(as.matrix(scaled_sorensen_dist))
# Bray-Curtis Dissimiliarty
scaled_bray_dist <- phyloseq::distance(scaled_physeq, method = "bray", binary = FALSE)
# Abundance-Unweighted UniFrac
scaled_uUnifrac_dist <- phyloseq::distance(scaled_physeq, method = "unifrac")
# Abundance-Weighted UniFrac
scaled_wUnifrac_dist <- phyloseq::distance(scaled_physeq, method = "wunifrac")
# Chunk 10: PERMANOVA-categorical-sorensen
# Sorensen
## 1. Run with by = terms for R² values, sensitive to order of variables!
## ALWAYS check and confirm the order of your terms and how they interact with each other.
sorensen_station_adonis_terms1 <- adonis2(scaled_sorensen_dist ~ station * date, data = metadata_df, by = "terms")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
fig.path = "../figures/06_CommunityAnalysis")
# Chunk 2: rmd-start
# What time did we start running this script?
start_time <- Sys.time()
# Chunk 3: set-seed
set.seed(238428)
# Chunk 4: load-packages
pacman::p_load(tidyverse, devtools, phyloseq, patchwork, vegan,
install = FALSE)
# Load Colors
source("code/colors.R")
# Load functions
source("code/functions.R")
# Chunk 5: load-data
# load phyloseq object
load("data/04_PhylogeneticTree/phytree_preprocessed_physeqs.RData")
archaeal_rooted_physeq
# Intuition check on seq depth
min(sample_sums(archaeal_rooted_physeq))
# Chunk 6: rm-outlier
archaeal_rooted_physeq <-
archaeal_rooted_physeq %>%
subset_samples(names != "20210615-MA-ABB2F") %>%
# And remove any ASVs unique to this sample, just in case.
prune_taxa(taxa_sums(.) > 0, .)
# Check that we now have 88 samples
archaeal_rooted_physeq
# Create Metadata_df
metadata_df <-
archaeal_rooted_physeq %>%
sample_data() %>%
data.frame()
# Chunk 7: explore-read-counts
# calculate read counts per sample
raw_TotalSeqs_df <-
archaeal_rooted_physeq %>%
# Calculate the total number of sequences/reads
sample_sums() %>%
data.frame()
# Take a look
head(raw_TotalSeqs_df)
# Rename the column
colnames(raw_TotalSeqs_df)[1] <- "TotalSeqs"
# add a new column of num_ASVs (RAW, non-noramlized # ASVs)
raw_TotalSeqsASVs_df <-
raw_TotalSeqs_df %>%
mutate(num_ASVs = colSums(otu_table(archaeal_rooted_physeq) > 1))
#View(raw_TotalSeqsASVs_df)
# Plot histogram of seq depth
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
scale_x_continuous(limits = c(0, 7500)) +
labs(title = "Raw Seq Depth ") +
theme_bw()
# Plot Seq Depth versus num_ASVs
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(0, 7500)) +
geom_smooth(method = "lm") +
labs(title = "Seq Depth vs # ASVs")
# is it significant?
summary(lm(TotalSeqs ~ num_ASVs, data = raw_TotalSeqsASVs_df))
# Chunk 8: scale-reads
min(sample_sums(archaeal_rooted_physeq))
# Scale the reads
scaled_physeq <-
archaeal_rooted_physeq %>%
scale_reads(round = "matround")
# Look at it
scaled_physeq
# Look at it more!
#View(data.frame(otu_table(archaeal_rooted_physeq)))
#View(data.frame(otu_table(scaled_physeq)))
# Confirm seq read depth of scaled_physeq
scaled_TotalSeqs_df <-
scaled_physeq %>%
sample_sums() %>%
data.frame()
colnames(scaled_TotalSeqs_df)[1] <- "TotalSeqs"
# add a new column of num_ASVs (RAW, non-noramlized # ASVs)
scaled_TotalSeqsASVs_df <-
scaled_TotalSeqs_df %>%
mutate(num_ASVs = colSums(otu_table(scaled_physeq) > 1))
# Plot it!
scaled_TotalSeqs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
scale_x_continuous(limits = c(0, 7500)) +
theme_bw()
# Scaling always gives us a range!
# MInimum sequences
min(scaled_TotalSeqs_df$TotalSeqs)
# Total Range
range(scaled_TotalSeqs_df)
# How many is that range?
range_seqs <- (max(scaled_TotalSeqs_df$TotalSeqs) - min(scaled_TotalSeqs_df$TotalSeqs))
range_seqs
# And in terms of percent?
range_seqs/max(scaled_TotalSeqs_df$TotalSeqs)
#View(scaled_TotalSeqs_df)
# Set the axis min and max for the next plot
max_y <- max(scaled_TotalSeqs_df$TotalSeqs) + 10
min_y <- min(scaled_TotalSeqs_df$TotalSeqs) - 10
# Now, draw the plot
scaled_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(min_y, max_y)) +
#geom_smooth(method = "lm") +
labs(title = "Scaled: Seq Depth vs # ASVs")
# Chunk 9: calc-dissimilarity
# Sorensen Dissimiliarty
scaled_sorensen_dist <- phyloseq::distance(scaled_physeq, method = "bray", binary = TRUE)
# What does it look like?
class(scaled_sorensen_dist)
str(scaled_sorensen_dist)
head(as.matrix(scaled_sorensen_dist))
# Bray-Curtis Dissimiliarty
scaled_bray_dist <- phyloseq::distance(scaled_physeq, method = "bray", binary = FALSE)
# Abundance-Unweighted UniFrac
scaled_uUnifrac_dist <- phyloseq::distance(scaled_physeq, method = "unifrac")
# Abundance-Weighted UniFrac
scaled_wUnifrac_dist <- phyloseq::distance(scaled_physeq, method = "wunifrac")
# Chunk 10: PERMANOVA-categorical-sorensen
# Sorensen
## 1. Run with by = terms for R² values, sensitive to order of variables!
## ALWAYS check and confirm the order of your terms and how they interact with each other.
sorensen_station_adonis_terms1 <- adonis2(scaled_sorensen_dist ~ station * date, data = metadata_df, by = "terms")
sorensen_station_adonis_terms1
# Check the order of the terms
sorensen_station_adonis_terms2 <- adonis2(scaled_sorensen_dist ~ date * station, data = metadata_df, by = "terms")
sorensen_station_adonis_terms2
## 2. Run with by = "margin" for marginal p-values, which we can compare to the residuals from the first one.
sorensen_station_adonis_margin <- adonis2(scaled_sorensen_dist ~ date * station, data = metadata_df, by = "margin")
sorensen_station_adonis_margin
# Chunk 11: PERMANOVA-salinity
## Now, let's add a continuous variable.
sorensen_salinity_adonis_terms1 <- adonis2(scaled_sorensen_dist ~ station * date * salinity_psu, data = metadata_df, by = "terms")
sorensen_salinity_adonis_terms1
# Check different order
sorensen_salinity_adonis_terms2 <- adonis2(scaled_sorensen_dist ~ salinity_psu * station * date, data = metadata_df, by = "terms")
sorensen_salinity_adonis_terms2
# Chunk 12: PERMANOVA-categorical-bray
# Bray-Curtis
## ALWAYS check and confirm the order of your terms and how they interact with each other.
bray_station_adonis_terms1 <- adonis2(scaled_bray_dist ~ station * date, data = metadata_df, by = "terms")
bray_station_adonis_terms1
bray_station_adonis_terms2 <- adonis2(scaled_bray_dist ~ date * station, data = metadata_df, by = "terms")
bray_station_adonis_terms2
## 2. Run with by = "margin" for marginal p-values
bray_station_adonis_margin <- adonis2(scaled_bray_dist ~ date * station, data = metadata_df, by = "margin")
bray_station_adonis_margin
# Chunk 13: PERMANOVA-salinity
## Now, let's add a continuous variable.
bray_salinity_adonis_terms1 <- adonis2(scaled_bray_dist ~ station * date * salinity_psu, data = metadata_df, by = "terms")
bray_salinity_adonis_terms1
# Check different order
bray_salinity_adonis_terms2 <- adonis2(scaled_bray_dist ~ salinity_psu * station * date, data = metadata_df, by = "terms")
sorensen_salinity_adonis_terms2
# Chunk 14: betadisper-sorensen
# Homogeneity of Disperson test with beta dispr
# Sorensen Betadisper - Station
dispr_sorensen_station <- betadisper(scaled_sorensen_dist, metadata_df$station)
# permutest() performs a non-parametric permutation test, which is robust and valid for the kind of data used in beta diversity analysis (e.g., dissimilarity matrices).
permutest(dispr_sorensen_station)
# Sorensen Betadisper - Date
dispr_sorensen_date <- betadisper(scaled_sorensen_dist, metadata_df$date)
permutest(dispr_sorensen_date)
# Sorensen Betadisper - Salinity psu
dispr_sorensen_salinity <- betadisper(scaled_sorensen_dist, metadata_df$salinity_psu)
permutest(dispr_sorensen_salinity)
# Chunk 15: betadisper-bray
# Bray-Curtis Betadisper - Station
dispr_bray_station <- betadisper(scaled_bray_dist, metadata_df$station)
permutest(dispr_bray_station)
# Bray-Curtis Betadisper - Date
dispr_bray_date <- betadisper(scaled_bray_dist, metadata_df$date)
permutest(dispr_bray_date)
# Bray-Curtis Betadisper - Salinity psu
dispr_bray_salinity <- betadisper(scaled_bray_dist, metadata_df$salinity_psu)
permutest(dispr_bray_salinity)
# Chunk 16: pcoa-plots
### SORENSEN
# First, calculate PCoA with Soresen
scaled_soren_pcoa <-
ordinate(physeq = scaled_physeq,
method = "PCoA",
distance = "bray", binary = TRUE)
# Take a quick look
str(scaled_soren_pcoa)
# Plot it: Sorensen PCoA
sorensen_pcoa_plot <-
plot_ordination(physeq = scaled_physeq,
ordination = scaled_soren_pcoa,
color = "station",
shape = "date",
title = "Sorensen PCoA") +
scale_color_manual(values = station_colors) +
scale_shape_manual(values = c(15, 16, 17)) +
geom_point(size = 5, alpha = 0.5, aes(color = station)) +
theme_bw() +
theme(legend.position = "right")
### Bray-Curtis
# Second, calculate PCoA with Bray-Curtis
scaled_bray_pcoa <-
ordinate(physeq = scaled_physeq,
method = "PCoA",
distance = "bray", binary = FALSE)
# Plot it: Bray-Curtis PCoA
bray_pcoa_plot <-
plot_ordination(physeq = scaled_physeq,
ordination = scaled_bray_pcoa,
color = "station",
shape = "date",
title = "Bray-Curtis PCoA") +
scale_color_manual(values = station_colors) +
scale_shape_manual(values = c(15, 16, 17)) +
geom_point(size = 5, alpha = 0.5, aes(color = station)) +
theme_bw() +
theme(legend.position = "right")
# Show the plots
sorensen_pcoa_plot + bray_pcoa_plot +
plot_layout(guides = "collect") +
plot_annotation(tag_levels = "A")
# Chunk 17: soren-nmds
## SORENSEN
scaled_soren_nmds <-
ordinate(physeq = scaled_physeq,
method = "NMDS",
distance = "bray", binary = TRUE)
# Plot it!
sorensen_nmds_plot <-
plot_ordination(physeq = scaled_physeq,
ordination = scaled_soren_nmds,
color = "station",
shape = "date",
title = "Sorensen NMDS") +
scale_color_manual(values = station_colors) +
scale_shape_manual(values = c(15, 16, 17)) +
geom_point(size = 5, alpha = 0.5, aes(color = station)) +
theme_bw() +
theme(legend.position = "right")
### Bray-Curtis
# Second, calculate NMDS with Bray-Curtis
scaled_bray_nmds <-
ordinate(physeq = scaled_physeq,
method = "NMDS",
distance = "bray", binary = FALSE)
# Plot it: Bray-Curtis NMDS
bray_nmds_plot <-
plot_ordination(physeq = scaled_physeq,
ordination = scaled_bray_nmds,
color = "station",
shape = "date",
title = "Bray-Curtis NMDS") +
scale_color_manual(values = station_colors) +
scale_shape_manual(values = c(15, 16, 17)) +
geom_point(size = 5, alpha = 0.5, aes(color = station)) +
theme_bw() +
theme(legend.position = "right")
# Show the plots
sorensen_nmds_plot + bray_nmds_plot +
plot_layout(guides = "collect") +
plot_annotation(tag_levels = "A")
# Chunk 18: ordinations
sorensen_pcoa_plot + bray_pcoa_plot +
sorensen_nmds_plot + bray_nmds_plot +
plot_layout(guides = "collect") +
plot_annotation(tag_levels = "A")
sorensen_pcoa_plot + bray_pcoa_plot +
sorensen_nmds_plot + bray_nmds_plot +
plot_layout(guides = "collect") +
plot_annotation(tag_levels = "A")
# Now, draw the plot
scaled_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(min_y, max_y)) +
#geom_smooth(method = "lm") +
labs(title = "Scaled: Seq Depth vs # ASVs")
# Plot it!
scaled_TotalSeqs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
scale_x_continuous(limits = c(0, 7500)) +
theme_bw()
# Plot Seq Depth versus num_ASVs
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(0, 7500)) +
geom_smooth(method = "lm") +
labs(title = "Seq Depth vs # ASVs")
# Now, draw the plot
scaled_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(min_y, max_y)) +
#geom_smooth(method = "lm") +
labs(title = "Scaled: Seq Depth vs # ASVs")
# Plot histogram of seq depth
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
scale_x_continuous(limits = c(0, 7500)) +
labs(title = "Raw Seq Depth ") +
theme_bw()
# Plot histogram of seq depth
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
scale_x_continuous(limits = c(0, 7500)) +
labs(title = "Raw Seq Depth Histogram") +
theme_bw()
# Plot Seq Depth versus num_ASVs
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(0, 7500)) +
geom_smooth(method = "lm") +
labs(title = "Seq Depth vs # ASVs")
# Plot histogram of seq depth
rawSeq_histogram <-
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
scale_x_continuous(limits = c(0, 7500)) +
labs(title = "Raw Seq Depth Histogram") +
theme_bw()
# Plot Seq Depth versus num_ASVs
rawSeq_vs_numASV_plot <-
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(0, 7500)) +
geom_smooth(method = "lm") +
labs(title = "Seq Depth vs # ASVs")
rawSeq_histogram + rawSeq_vs_numASV_plot
# Plot Seq Depth versus num_ASVs
rawSeq_vs_numASV_plot <-
raw_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(0, 7500)) +
geom_smooth(method = "lm") +
labs(title = "Seq Depth vs # ASVs") +
theme_bw()
# is it significant?
summary(lm(TotalSeqs ~ num_ASVs, data = raw_TotalSeqsASVs_df))
rawSeq_histogram + rawSeq_vs_numASV_plot
# Now, draw the plot
scaled_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(min_y, max_y)) +
#geom_smooth(method = "lm") +
labs(title = "Scaled: Seq Depth vs # ASVs")
# Now, draw the plot
scaled_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(min_y, max_y)) +
#geom_smooth(method = "lm") +
theme_bw() +
labs(title = "Scaled: Seq Depth vs # ASVs")
# Now, draw the plot
scaledSeq_vs_numASV_plot <-
scaled_TotalSeqsASVs_df %>%
ggplot(aes(x = num_ASVs, y = TotalSeqs)) +
geom_point() +
scale_y_continuous(limits = c(min_y, max_y)) +
#geom_smooth(method = "lm") +
theme_bw() +
labs(title = "Scaled: Seq Depth vs # ASVs")
scaledSeq_vs_numASV_plot
# Plot it!
scaledSeq_histogram <-
scaled_TotalSeqs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
scale_x_continuous(limits = c(0, 7500)) +
theme_bw()
# Plot it!
scaledSeq_histogram <-
scaled_TotalSeqs_df %>%
ggplot(aes(x = TotalSeqs)) +
geom_histogram(bins = 50) +
labs(title = "Scaled Seq Depth Histogram") +
scale_x_continuous(limits = c(0, 7500)) +
theme_bw()
